// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FitnessStudio.Models;

public partial class FitnessStudioDBContext : DbContext
{
    public FitnessStudioDBContext()
    {
    }

    public FitnessStudioDBContext(DbContextOptions<FitnessStudioDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<KalendKund> KalendKund { get; set; }

    public virtual DbSet<Kalender> Kalender { get; set; }

    public virtual DbSet<Karte> Karte { get; set; }

    public virtual DbSet<Kunden> Kunden { get; set; }

    public virtual DbSet<Postleitzahlen> Postleitzahlen { get; set; }

    public virtual DbSet<Rechnung> Rechnung { get; set; }

    public virtual DbSet<Trainer> Trainer { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-DEV3\\SQLEXPRESS;Initial Catalog=FitnessStudioDB;Integrated Security=True;Encrypt=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<KalendKund>(entity =>
        {
            entity.HasOne(d => d.ExtKalend).WithMany(p => p.KalendKund)
                .HasForeignKey(d => d.ExtKalendID)
                .HasConstraintName("FK_KalendKund_Kalender");

            entity.HasOne(d => d.ExtKund).WithMany(p => p.KalendKund)
                .HasForeignKey(d => d.ExtKundID)
                .HasConstraintName("FK_KalendKund_Kunden");
        });

        modelBuilder.Entity<Kalender>(entity =>
        {
            entity.HasKey(e => e.KalendID);

            entity.Property(e => e.KalendAktivName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KalendDatum).HasColumnType("date");

            entity.HasOne(d => d.KalendTrain).WithMany(p => p.Kalender)
                .HasForeignKey(d => d.KalendTrainID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Kalender_Trainer");
        });

        modelBuilder.Entity<Karte>(entity =>
        {
            entity.Property(e => e.KarteName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Kunden>(entity =>
        {
            entity.HasKey(e => e.KundID);

            entity.Property(e => e.KundAdresse)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KundGebDatum).HasColumnType("date");
            entity.Property(e => e.KundNachname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KundVorname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.KundKartNumNavigation).WithMany(p => p.Kunden)
                .HasForeignKey(d => d.KundKartNum)
                .HasConstraintName("FK_Kunden_Karte");

            entity.HasOne(d => d.KundPLZNavigation).WithMany(p => p.Kunden)
                .HasForeignKey(d => d.KundPLZ)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Kunden_Postleitzahlen");
        });

        modelBuilder.Entity<Postleitzahlen>(entity =>
        {
            entity.HasKey(e => e.PostID);

            entity.Property(e => e.PostID).ValueGeneratedNever();
            entity.Property(e => e.PostOrt)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Rechnung>(entity =>
        {
            entity.HasKey(e => e.RechID);

            entity.Property(e => e.RechDatum).HasColumnType("date");

            entity.HasOne(d => d.RechKund).WithMany(p => p.Rechnung)
                .HasForeignKey(d => d.RechKundID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rechnung_Kunden");
        });

        modelBuilder.Entity<Trainer>(entity =>
        {
            entity.HasKey(e => e.TrainID);

            entity.Property(e => e.TrainAdresse)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrainGebDatum).HasColumnType("date");
            entity.Property(e => e.TrainNachname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrainVorname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.TrainPLZNavigation).WithMany(p => p.Trainer)
                .HasForeignKey(d => d.TrainPLZ)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Trainer_Postleitzahlen");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}